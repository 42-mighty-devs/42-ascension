services:
  jwt:
    image: jwt
    container_name: jwt
    pull_policy: never
    build: ./jwt
    ports:
      - "8100:8100"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./jwt:/server
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_EXPIRE_SECONDS=${JWT_EXPIRE_SECONDS}
      - JWT_REFRESH_EXPIRE_SECONDS=${JWT_REFRESH_EXPIRE_SECONDS}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
  websocket:
    image: websocket
    container_name: websocket
    pull_policy: never
    build: ./websocket
    ports:
      - "7600:7600"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./websocket:/server
    environment:
      - WEBSOCKET_WORKER=${WEBSOCKET_WORKER}
      - WEBSOCKET_THREAD=${WEBSOCKET_THREAD}
  auth:
    image: auth
    container_name: auth
    pull_policy: never
    build: ./auth
    ports:
      - "8200:8200"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./auth:/server
    environment:
      - OAUTH_42_URL=${OAUTH_42_URL}
      - OAUTH_TOKEN_URL=${OAUTH_TOKEN_URL}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - JWT_URL=${JWT_URL}
      - OTP_SECRET=${OTP_SECRET}
      - OTP_ISSUER=${OTP_ISSUER}
  db:
    image: postgres:17.1-alpine3.20
    container_name: postgresdb
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5432:5432"
    networks:
      - postgresdb_network
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER}'"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  postgresdb_network:
    driver: bridge

volumes:
  prometheus-data:
  postgresql-data:
